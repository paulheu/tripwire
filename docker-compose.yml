services:
  #################################################################
  # TRAEFIK SERVICE
  #################################################################
  traefik:
    image: traefik:latest
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-data/acme.json:/acme.json
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.email=your@email.com"
      - "--certificatesresolvers.myresolver.acme.storage=/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"

  #################################################################
  # NGINX SERVICE
  #################################################################
  nginx:
    build: .docker/nginx
    container_name: nginx
    ports:
      - 8081:80
    networks:
      # - web #- Used with Traefik
      - tripwire
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=tripwire_web"
      # Router rule for domain
      - "traefik.http.routers.nginx.rule=Host(`your domain`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls.certresolver=myresolver"
      # Fallback to plain HTTP -> redirect to HTTPS
      - "traefik.http.routers.nginx_http.rule=Host(`your domain`)"
      - "traefik.http.routers.nginx_http.entrypoints=web"
      - "traefik.http.routers.nginx_http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # Let Traefik know container listens on port 80 internally
      - "traefik.http.services.nginx.loadbalancer.server.port=80" 
    volumes:
      - "./:/opt/app"

  #################################################################
  # PHP-FPM SERVICE
  #################################################################
  php-fpm:
    build: .docker/php-fpm
    container_name: php-fpm
    networks:
      - tripwire
    volumes:
      - "./:/opt/app"

  #################################################################
  # OFFICIAL MYSQL 5.7 SERVICE
  #################################################################
  mysql:
    image: mysql:5.7
    container_name: mysql
    networks:
      - tripwire
    environment:
      - MYSQL_ROOT_PASSWORD=apasswordforroot # do not use quotes
      - MYSQL_DATABASE=tripwire_database
      - MYSQL_USER=norootuser # do not use quotes
      - MYSQL_PASSWORD=anonrootpassword # do not use quotes
    volumes:
      - mysql-data:/var/lib/mysql
    entrypoint: sh -c "/tmp/init.sh && echo 'starting mysql...' && /docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

  # Development only - For database administration

  #################################################################
  # ADMINER SERVICE (DB web UI)
  #################################################################
  adminer:
    container_name: adminer
    image: adminer
    networks:
      - tripwire
    ports:
      - 9000:8080

  #################################################################
  # DB-SEED SERVICE
  #################################################################
  db-seed:
    build:
      context: .docker/mysql
      dockerfile: Dockerfile
    container_name: db-seed
    depends_on:
      - mysql
    networks:
      - tripwire
    environment:  
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_ROOT_USER=root
      - DB_ROOT_PASS=samerootpasswordasabove
      - TRIPWIRE_DB=tripwire_database
      - SDE_DB=eve_dump
    # No need for volumes or ports
    # The seed script will run once, then exit

volumes:
  mysql-data:

networks:
  web:
  tripwire:
